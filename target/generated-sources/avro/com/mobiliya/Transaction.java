/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mobiliya;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** This is data for transactions. */
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6027630748380360653L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.mobiliya\",\"doc\":\"This is data for transactions.\",\"fields\":[{\"name\":\"step\",\"type\":\"int\",\"default\":1},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"nameOrig\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"oldbalanceOrg\",\"type\":\"float\"},{\"name\":\"newbalanceOrig\",\"type\":\"float\"},{\"name\":\"nameDest\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"oldbalanceDest\",\"type\":\"float\"},{\"name\":\"newbalanceDest\",\"type\":\"float\"},{\"name\":\"isFraud\",\"type\":\"int\"},{\"name\":\"isFlaggedFraud\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transaction from a ByteBuffer. */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int step;
   private java.lang.String type;
   private float amount;
   private java.lang.String nameOrig;
   private float oldbalanceOrg;
   private float newbalanceOrig;
   private java.lang.String nameDest;
   private float oldbalanceDest;
   private float newbalanceDest;
   private int isFraud;
   private int isFlaggedFraud;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param step The new value for step
   * @param type The new value for type
   * @param amount The new value for amount
   * @param nameOrig The new value for nameOrig
   * @param oldbalanceOrg The new value for oldbalanceOrg
   * @param newbalanceOrig The new value for newbalanceOrig
   * @param nameDest The new value for nameDest
   * @param oldbalanceDest The new value for oldbalanceDest
   * @param newbalanceDest The new value for newbalanceDest
   * @param isFraud The new value for isFraud
   * @param isFlaggedFraud The new value for isFlaggedFraud
   */
  public Transaction(java.lang.Integer step, java.lang.String type, java.lang.Float amount, java.lang.String nameOrig, java.lang.Float oldbalanceOrg, java.lang.Float newbalanceOrig, java.lang.String nameDest, java.lang.Float oldbalanceDest, java.lang.Float newbalanceDest, java.lang.Integer isFraud, java.lang.Integer isFlaggedFraud) {
    this.step = step;
    this.type = type;
    this.amount = amount;
    this.nameOrig = nameOrig;
    this.oldbalanceOrg = oldbalanceOrg;
    this.newbalanceOrig = newbalanceOrig;
    this.nameDest = nameDest;
    this.oldbalanceDest = oldbalanceDest;
    this.newbalanceDest = newbalanceDest;
    this.isFraud = isFraud;
    this.isFlaggedFraud = isFlaggedFraud;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return step;
    case 1: return type;
    case 2: return amount;
    case 3: return nameOrig;
    case 4: return oldbalanceOrg;
    case 5: return newbalanceOrig;
    case 6: return nameDest;
    case 7: return oldbalanceDest;
    case 8: return newbalanceDest;
    case 9: return isFraud;
    case 10: return isFlaggedFraud;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: step = (java.lang.Integer)value$; break;
    case 1: type = (java.lang.String)value$; break;
    case 2: amount = (java.lang.Float)value$; break;
    case 3: nameOrig = (java.lang.String)value$; break;
    case 4: oldbalanceOrg = (java.lang.Float)value$; break;
    case 5: newbalanceOrig = (java.lang.Float)value$; break;
    case 6: nameDest = (java.lang.String)value$; break;
    case 7: oldbalanceDest = (java.lang.Float)value$; break;
    case 8: newbalanceDest = (java.lang.Float)value$; break;
    case 9: isFraud = (java.lang.Integer)value$; break;
    case 10: isFlaggedFraud = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'step' field.
   * @return The value of the 'step' field.
   */
  public java.lang.Integer getStep() {
    return step;
  }


  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Float getAmount() {
    return amount;
  }


  /**
   * Gets the value of the 'nameOrig' field.
   * @return The value of the 'nameOrig' field.
   */
  public java.lang.String getNameOrig() {
    return nameOrig;
  }


  /**
   * Gets the value of the 'oldbalanceOrg' field.
   * @return The value of the 'oldbalanceOrg' field.
   */
  public java.lang.Float getOldbalanceOrg() {
    return oldbalanceOrg;
  }


  /**
   * Gets the value of the 'newbalanceOrig' field.
   * @return The value of the 'newbalanceOrig' field.
   */
  public java.lang.Float getNewbalanceOrig() {
    return newbalanceOrig;
  }


  /**
   * Gets the value of the 'nameDest' field.
   * @return The value of the 'nameDest' field.
   */
  public java.lang.String getNameDest() {
    return nameDest;
  }


  /**
   * Gets the value of the 'oldbalanceDest' field.
   * @return The value of the 'oldbalanceDest' field.
   */
  public java.lang.Float getOldbalanceDest() {
    return oldbalanceDest;
  }


  /**
   * Gets the value of the 'newbalanceDest' field.
   * @return The value of the 'newbalanceDest' field.
   */
  public java.lang.Float getNewbalanceDest() {
    return newbalanceDest;
  }


  /**
   * Gets the value of the 'isFraud' field.
   * @return The value of the 'isFraud' field.
   */
  public java.lang.Integer getIsFraud() {
    return isFraud;
  }


  /**
   * Gets the value of the 'isFlaggedFraud' field.
   * @return The value of the 'isFlaggedFraud' field.
   */
  public java.lang.Integer getIsFlaggedFraud() {
    return isFlaggedFraud;
  }


  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static com.mobiliya.Transaction.Builder newBuilder() {
    return new com.mobiliya.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.mobiliya.Transaction.Builder newBuilder(com.mobiliya.Transaction.Builder other) {
    return new com.mobiliya.Transaction.Builder(other);
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.mobiliya.Transaction.Builder newBuilder(com.mobiliya.Transaction other) {
    return new com.mobiliya.Transaction.Builder(other);
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private int step;
    private java.lang.String type;
    private float amount;
    private java.lang.String nameOrig;
    private float oldbalanceOrg;
    private float newbalanceOrig;
    private java.lang.String nameDest;
    private float oldbalanceDest;
    private float newbalanceDest;
    private int isFraud;
    private int isFlaggedFraud;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mobiliya.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.step)) {
        this.step = data().deepCopy(fields()[0].schema(), other.step);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nameOrig)) {
        this.nameOrig = data().deepCopy(fields()[3].schema(), other.nameOrig);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.oldbalanceOrg)) {
        this.oldbalanceOrg = data().deepCopy(fields()[4].schema(), other.oldbalanceOrg);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newbalanceOrig)) {
        this.newbalanceOrig = data().deepCopy(fields()[5].schema(), other.newbalanceOrig);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nameDest)) {
        this.nameDest = data().deepCopy(fields()[6].schema(), other.nameDest);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.oldbalanceDest)) {
        this.oldbalanceDest = data().deepCopy(fields()[7].schema(), other.oldbalanceDest);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.newbalanceDest)) {
        this.newbalanceDest = data().deepCopy(fields()[8].schema(), other.newbalanceDest);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isFraud)) {
        this.isFraud = data().deepCopy(fields()[9].schema(), other.isFraud);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isFlaggedFraud)) {
        this.isFlaggedFraud = data().deepCopy(fields()[10].schema(), other.isFlaggedFraud);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mobiliya.Transaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.step)) {
        this.step = data().deepCopy(fields()[0].schema(), other.step);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nameOrig)) {
        this.nameOrig = data().deepCopy(fields()[3].schema(), other.nameOrig);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.oldbalanceOrg)) {
        this.oldbalanceOrg = data().deepCopy(fields()[4].schema(), other.oldbalanceOrg);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newbalanceOrig)) {
        this.newbalanceOrig = data().deepCopy(fields()[5].schema(), other.newbalanceOrig);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nameDest)) {
        this.nameDest = data().deepCopy(fields()[6].schema(), other.nameDest);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.oldbalanceDest)) {
        this.oldbalanceDest = data().deepCopy(fields()[7].schema(), other.oldbalanceDest);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.newbalanceDest)) {
        this.newbalanceDest = data().deepCopy(fields()[8].schema(), other.newbalanceDest);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isFraud)) {
        this.isFraud = data().deepCopy(fields()[9].schema(), other.isFraud);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isFlaggedFraud)) {
        this.isFlaggedFraud = data().deepCopy(fields()[10].schema(), other.isFlaggedFraud);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'step' field.
      * @return The value.
      */
    public java.lang.Integer getStep() {
      return step;
    }

    /**
      * Sets the value of the 'step' field.
      * @param value The value of 'step'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setStep(int value) {
      validate(fields()[0], value);
      this.step = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'step' field has been set.
      * @return True if the 'step' field has been set, false otherwise.
      */
    public boolean hasStep() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'step' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearStep() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setType(java.lang.String value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Float getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setAmount(float value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nameOrig' field.
      * @return The value.
      */
    public java.lang.String getNameOrig() {
      return nameOrig;
    }

    /**
      * Sets the value of the 'nameOrig' field.
      * @param value The value of 'nameOrig'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setNameOrig(java.lang.String value) {
      validate(fields()[3], value);
      this.nameOrig = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nameOrig' field has been set.
      * @return True if the 'nameOrig' field has been set, false otherwise.
      */
    public boolean hasNameOrig() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nameOrig' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearNameOrig() {
      nameOrig = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldbalanceOrg' field.
      * @return The value.
      */
    public java.lang.Float getOldbalanceOrg() {
      return oldbalanceOrg;
    }

    /**
      * Sets the value of the 'oldbalanceOrg' field.
      * @param value The value of 'oldbalanceOrg'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setOldbalanceOrg(float value) {
      validate(fields()[4], value);
      this.oldbalanceOrg = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'oldbalanceOrg' field has been set.
      * @return True if the 'oldbalanceOrg' field has been set, false otherwise.
      */
    public boolean hasOldbalanceOrg() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'oldbalanceOrg' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearOldbalanceOrg() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'newbalanceOrig' field.
      * @return The value.
      */
    public java.lang.Float getNewbalanceOrig() {
      return newbalanceOrig;
    }

    /**
      * Sets the value of the 'newbalanceOrig' field.
      * @param value The value of 'newbalanceOrig'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setNewbalanceOrig(float value) {
      validate(fields()[5], value);
      this.newbalanceOrig = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'newbalanceOrig' field has been set.
      * @return True if the 'newbalanceOrig' field has been set, false otherwise.
      */
    public boolean hasNewbalanceOrig() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'newbalanceOrig' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearNewbalanceOrig() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nameDest' field.
      * @return The value.
      */
    public java.lang.String getNameDest() {
      return nameDest;
    }

    /**
      * Sets the value of the 'nameDest' field.
      * @param value The value of 'nameDest'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setNameDest(java.lang.String value) {
      validate(fields()[6], value);
      this.nameDest = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nameDest' field has been set.
      * @return True if the 'nameDest' field has been set, false otherwise.
      */
    public boolean hasNameDest() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'nameDest' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearNameDest() {
      nameDest = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldbalanceDest' field.
      * @return The value.
      */
    public java.lang.Float getOldbalanceDest() {
      return oldbalanceDest;
    }

    /**
      * Sets the value of the 'oldbalanceDest' field.
      * @param value The value of 'oldbalanceDest'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setOldbalanceDest(float value) {
      validate(fields()[7], value);
      this.oldbalanceDest = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'oldbalanceDest' field has been set.
      * @return True if the 'oldbalanceDest' field has been set, false otherwise.
      */
    public boolean hasOldbalanceDest() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'oldbalanceDest' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearOldbalanceDest() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'newbalanceDest' field.
      * @return The value.
      */
    public java.lang.Float getNewbalanceDest() {
      return newbalanceDest;
    }

    /**
      * Sets the value of the 'newbalanceDest' field.
      * @param value The value of 'newbalanceDest'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setNewbalanceDest(float value) {
      validate(fields()[8], value);
      this.newbalanceDest = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'newbalanceDest' field has been set.
      * @return True if the 'newbalanceDest' field has been set, false otherwise.
      */
    public boolean hasNewbalanceDest() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'newbalanceDest' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearNewbalanceDest() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFraud' field.
      * @return The value.
      */
    public java.lang.Integer getIsFraud() {
      return isFraud;
    }

    /**
      * Sets the value of the 'isFraud' field.
      * @param value The value of 'isFraud'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setIsFraud(int value) {
      validate(fields()[9], value);
      this.isFraud = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isFraud' field has been set.
      * @return True if the 'isFraud' field has been set, false otherwise.
      */
    public boolean hasIsFraud() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isFraud' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearIsFraud() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFlaggedFraud' field.
      * @return The value.
      */
    public java.lang.Integer getIsFlaggedFraud() {
      return isFlaggedFraud;
    }

    /**
      * Sets the value of the 'isFlaggedFraud' field.
      * @param value The value of 'isFlaggedFraud'.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder setIsFlaggedFraud(int value) {
      validate(fields()[10], value);
      this.isFlaggedFraud = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isFlaggedFraud' field has been set.
      * @return True if the 'isFlaggedFraud' field has been set, false otherwise.
      */
    public boolean hasIsFlaggedFraud() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isFlaggedFraud' field.
      * @return This builder.
      */
    public com.mobiliya.Transaction.Builder clearIsFlaggedFraud() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.step = fieldSetFlags()[0] ? this.step : (java.lang.Integer) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.String) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Float) defaultValue(fields()[2]);
        record.nameOrig = fieldSetFlags()[3] ? this.nameOrig : (java.lang.String) defaultValue(fields()[3]);
        record.oldbalanceOrg = fieldSetFlags()[4] ? this.oldbalanceOrg : (java.lang.Float) defaultValue(fields()[4]);
        record.newbalanceOrig = fieldSetFlags()[5] ? this.newbalanceOrig : (java.lang.Float) defaultValue(fields()[5]);
        record.nameDest = fieldSetFlags()[6] ? this.nameDest : (java.lang.String) defaultValue(fields()[6]);
        record.oldbalanceDest = fieldSetFlags()[7] ? this.oldbalanceDest : (java.lang.Float) defaultValue(fields()[7]);
        record.newbalanceDest = fieldSetFlags()[8] ? this.newbalanceDest : (java.lang.Float) defaultValue(fields()[8]);
        record.isFraud = fieldSetFlags()[9] ? this.isFraud : (java.lang.Integer) defaultValue(fields()[9]);
        record.isFlaggedFraud = fieldSetFlags()[10] ? this.isFlaggedFraud : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
